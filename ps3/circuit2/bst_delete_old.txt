    # def delete(self, key):
    #     node, _ = self.find(key)
        
    #     # Empty tree
    #     if node is None:
    #         return None
        
    #     current = None
        
    #     # If to be deleted is root
    #     if node is self.root:
    #         if node.left is None:
    #             self.root = node.right
    #             node.right = None
                
    #             if self.root:
    #                 self.root.parent = None
            
    #         elif node.right is None:
    #             self.root = node.left
    #             node.left = None
    #             self.root.parent = None
                
    #         else:
    #             successor = self.successor(node)
    #             current = successor.parent
                
    #             if successor is node.right:
    #                 self.root = node.right
    #                 successor.left = node.left
    #                 successor.parent = None
    #                 node.left = None
    #                 node.right = None
    #                 current = self.root
                    
    #             elif successor.right is None:
    #                 self.root = successor
    #                 successor.left = node.left
    #                 successor.right = node.right
    #                 current.left = None
    #                 successor.parent = None
    #                 node.left = None
    #                 node.right = None
                    
    #             else:
    #                 self.root = successor
    #                 current.left = successor.right
    #                 successor.left = node.left
    #                 successor.right = node.right
    #                 successor.parent = None
    #                 node.left = None
    #                 node.right = None

    #             while current is not None:
    #                 self.update_node_height(current)
    #                 self.update_node_tree_size(current)
    #                 current = current.parent
                    
    #         return node
        
    #     # If to be deleted is left child
    #     if node is node.parent.left:
    #         if node.left is None:
    #             current = node.parent
    #             current.left = node.right
                
    #             if node.right:
    #                 node.right.parent = node.parent
    #                 node.right = None

    #             node.parent = None
            
    #         elif node.right is None:
    #             current = node.parent
    #             current.left = node.left
    #             node.left.parent = node.parent
    #             node.left = None
    #             node.parent = None
                
    #         else:
    #             successor = self.successor(node)
    #             current = successor.parent
                
    #             if successor is node.right:
    #                 node.parent.left = successor
    #                 successor.left = node.left
    #                 successor.parent = node.parent
    #                 current = successor
    #                 node.left = None
    #                 node.right = None
    #                 node.parent = None
                    
    #             elif successor.right is None:
    #                 node.parent.left = successor
    #                 successor.left = node.left
    #                 successor.right = node.right
    #                 successor.left.parent = successor
    #                 successor.right.parent = successor
    #                 successor.parent = node.parent
    #                 current.left = None
    #                 node.left = None
    #                 node.right = None
    #                 node.parent = None
                    
    #             else:
    #                 node.parent.left = successor
    #                 current.left = successor.right
    #                 successor.right.parent = current
    #                 successor.left = node.left
    #                 successor.right = node.right
    #                 successor.left.parent = successor
    #                 successor.right.parent = successor
    #                 successor.parent = node.parent
    #                 node.left = None
    #                 node.right = None
    #                 node.parent = None
  
    #     # If to be deleted is right child
    #     else:
    #         if node.left is None:
    #             current = node.parent
    #             current.right = node.right
                
    #             if node.right:
    #                 node.right.parent = node.parent
    #                 node.right = None

    #             node.parent = None
            
    #         elif node.right is None:
    #             current = node.parent
    #             current.right = node.left
    #             node.left.parent = node.parent
    #             node.left = None
    #             node.parent = None
                
    #         else:
    #             successor = self.successor(node)
    #             current = successor.parent
                
    #             if successor is node.right:
    #                 node.parent.right = successor
    #                 successor.left = node.left
    #                 successor.parent = node.parent
    #                 current = successor
    #                 node.left = None
    #                 node.right = None
    #                 node.parent = None
                    
    #             elif successor.right is None:
    #                 node.parent.right = successor
    #                 successor.left = node.left
    #                 successor.right = node.right
    #                 successor.left.parent = successor
    #                 successor.right.parent = successor
    #                 successor.parent = node.parent
    #                 current.left = None
    #                 node.left = None
    #                 node.right = None
    #                 node.parent = None
                    
    #             else:
    #                 node.parent.right = successor
    #                 current.left = successor.right
    #                 successor.right.parent = current
    #                 successor.left = node.left
    #                 successor.right = node.right
    #                 successor.left.parent = successor
    #                 successor.right.parent = successor
    #                 successor.parent = node.parent
    #                 node.left = None
    #                 node.right = None
    #                 node.parent = None
                    
    #     while current is not None:
    #         self.update_node_height(current)
    #         self.update_node_tree_size(current)
    #         current = current.parent
                    
    #     return node